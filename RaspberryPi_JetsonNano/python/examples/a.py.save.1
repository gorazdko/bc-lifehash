#!/usr/bin/python
# -*- coding:utf-8 -*-
import sys
import os
picdir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'pic')
libdir = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'lib')
shades_6x6 = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'shades_6x6')
if os.path.exists(libdir):
    sys.path.append(libdir)

import logging
from waveshare_epd import epd1in54_V2
import time
from PIL import Image,ImageDraw,ImageFont
import traceback

logging.basicConfig(level=logging.DEBUG)


def get_luminance(R, G, B):
    return 0.2126*(R/256.0) + 0.7152*(G/256.0) + 0.0722*(B/256.0)

try:
    logging.info("epd1in54_V2 Demo")
    
    epd = epd1in54_V2.EPD()
    
    logging.info("init and Clear")
    epd.init()
    epd.Clear(0xFF)
    time.sleep(1)
    
    # Drawing on the image
    logging.info("1.Drawing on the image...")
    image = Image.new('1', (epd.width, epd.height), 255)  # 255: clear the frame
    
    draw = ImageDraw.Draw(image)
     
    # read bmp file 
    logging.info("shades...")

    rgb = [146, 126, 130, 178, 104, 92, 182, 101, 87, 202, 88, 64, 199, 89, 66, 197, 90, 69, 182, 101, 87, 180, 102, 89, 159, 117, 114, 210, 82, 54, 0 ,0 ,0, 0, 0]

    for y in range (0,32):
        for x in range(0,32):
            lum = get_luminance(rgb[x], rgb[x+1], rgb[x+2])
            #print(lum)
            shade = int(lum*100) % 35
            print(shade)
            
            bmp = Image.open(os.path.join(shades_6x6, str(shade) + '.bmp'))
            image.paste(bmp, (x*6,y*6))
        print(" ")    
        

    #bmp = Image.open(os.path.join(shades_6x6, '8.bmp'))
    
    #image.paste(bmp, (50,50))
   
    epd.display(epd.getbuffer(image))
    time.sleep(10)
    
    # read bmp file on window
    logging.info("3.read bmp file on window...")
    epd.Clear(0xFF)
    image1 = Image.new('1', (epd.width, epd.height), 255)  # 255: clear the frame
    bmp = Image.open(os.path.join(picdir, '100x100.bmp'))
    image1.paste(bmp, (50,50))    
    epd.display(epd.getbuffer(image1))
    time.sleep(2)
    
    # partial update
    logging.info("4.show time...")
    time_image = image1
    # Image.new('1', (epd.width, epd.height), 255)
    epd.displayPartBaseImage(epd.getbuffer(time_image))
    
    time_draw = ImageDraw.Draw(time_image)
    num = 0
    while (True):
        time_draw.rectangle((10, 10, 120, 50), fill = 255)
        time_draw.text((10, 10), time.strftime('%H:%M:%S'), font = font, fill = 0)
        newimage = time_image.crop([10, 10, 120, 50])
        time_image.paste(newimage, (10,10))  
        epd.displayPart(epd.getbuffer(time_image))
        num = num + 1
        if(num == 20):
            break
    
    logging.info("Clear...")
    epd.init()
    epd.Clear(0xFF)
    
    logging.info("Goto Sleep...")
    epd.sleep()
    time.sleep(3)
    
    epd.Dev_exit()
        
except IOError as e:
    logging.info(e)
    
except KeyboardInterrupt:    
    logging.info("ctrl + c:")
    epd1in54_V2.epdconfig.module_exit()
    exit()




